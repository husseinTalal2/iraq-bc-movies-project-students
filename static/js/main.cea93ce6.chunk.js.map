{"version":3,"sources":["Components/MovieItem.js","Components/MovieGrid.js","Components/Main.js","Components/Footer.js","Components/SearchBox.js","Components/GenresDropdown.js","Components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["MovieItem","props","Card","className","Img","variant","src","mov","poster_path","Body","Title","title","Row","Col","Badge","pill","release_date","substring","vote_average","MovieGrid","Container","movies","map","movie","xs","md","lg","key","id","Main","footer","href","SearchBox","useState","searchText","setSearchText","setQuery","isLoading","setIsLoading","Form","inline","onSubmit","e","preventDefault","fetch","path","query","atob","constructUrl","then","response","json","data","setMovies","results","setTimeout","FormControl","onChange","target","value","type","placeholder","required","Spinner","animation","Button","GenresDropdown","genreId","setGenreId","genres","setGenres","handleClick","filter","genre_ids","includes","parseInt","Control","onClick","as","disabled","selected","genre","name","NavB","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","Nav","Link","App","trending","setTrending","window","addEventListener","length","Footer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cea93ce6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, Button, Badge, Col, Row } from \"react-bootstrap\";\r\nfunction MovieItem(props) {\r\n    return (\r\n        <Card className=\"shadow my-3 card-shadow\" >\r\n            <Card.Img\r\n                variant=\"top\"\r\n                src={\"https://image.tmdb.org/t/p/w300\" + props.mov.poster_path}\r\n            />\r\n            <Card.Body>\r\n                <Card.Title>{props.mov.title}</Card.Title>\r\n                <Row className=\"justify-content-md-between\">\r\n                    <Col>\r\n                        <Badge pill variant=\"primary\">\r\n                            {props.mov.release_date.substring(0, 4)}\r\n                        </Badge>\r\n                    </Col>\r\n                    <Col>\r\n                        <Badge pill variant=\"warning\">\r\n                            Rating {props.mov.vote_average}\r\n                        </Badge>\r\n                    </Col>\r\n                </Row>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default MovieItem;\r\n","import React from \"react\";\r\nimport MovieItem from \"./MovieItem\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nfunction MovieGrid(props) {\r\n    return (\r\n        <Container className= \"my-5\">\r\n            <Row>\r\n            {props.movies.map((movie) => {\r\n                    return (\r\n                        <Col xs={12} md={4} lg={3} key={movie.id}>\r\n                            <MovieItem  mov={movie}/>\r\n                        </Col>\r\n                    );\r\n                })}\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default MovieGrid;\r\n","import React from \"react\";\r\nimport MovieGrid from \"./MovieGrid\";\r\nfunction Main(props) {\r\n    return (\r\n        <main>\r\n            <MovieGrid  movies={props.movies}/>\r\n        </main>\r\n    );\r\n}\r\nexport default Main;\r\n","import React from \"react\";\r\n\r\nfunction footer() {\r\n    return (\r\n        <footer className=\"d-flex justify-content-center bg-dark p-5 text-white \">\r\n            <p>\r\n                The website made with love by\r\n                <a href=\"https://github.com/abdulbasit-web\">\r\n                    {\" \"}\r\n                    Abdulbasit\r\n                </a>, <a href=\"https://github.com/husseinTalal2\"> Hussein </a>,{\" \"}\r\n                <a href=\"https://github.com/ZeenaKareemAlhello\"> Zeena </a>\r\n                and <a href=\"https://github.com/yazenfiras\"> Yezen </a>\r\n            </p>\r\n        </footer>\r\n    );\r\n}\r\nexport default footer;\r\n","import React, { useState } from \"react\";\r\nimport { Form, FormControl, Button, Spinner } from \"react-bootstrap\";\r\nfunction SearchBox(props) {\r\n    const [searchText, setSearchText] = useState(\"\");\r\n    const [query, setQuery] = useState(\"\");\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const TMDB_BASE_URL = \"https://api.themoviedb.org/3\";\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        setQuery(searchText);\r\n        const constructUrl = (path, query) => {\r\n            return `${TMDB_BASE_URL}/${path}?api_key=${atob(\r\n                \"ZDJmYTdhZDFlMjZhZjA4NDdkMzQ5ZDdkYmQ1ZjkzZTU=\"\r\n            )}&query=${query}`;\r\n        };\r\n\r\n        fetch(constructUrl(\"search/movie\", searchText))\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                props.setMovies(data.results);\r\n                setIsLoading(true);\r\n                setTimeout(() => {\r\n                    setIsLoading(false);\r\n                }, 500);\r\n            });\r\n    };\r\n\r\n    return (\r\n        <Form inline onSubmit={handleSubmit}>\r\n            <FormControl\r\n                onChange={(e) => setSearchText(e.target.value)}\r\n                type=\"text\"\r\n                placeholder=\"Search for movie...\"\r\n                className=\"mr-sm-2\"\r\n                required\r\n            />\r\n            {isLoading ? (\r\n                <Spinner\r\n                    className={isLoading ? \"d-block\" : \"d-none\"}\r\n                    animation=\"border\"\r\n                    variant=\"success\"\r\n                />\r\n            ) : (\r\n                <Button type=\"submit\" variant=\"outline-success\">\r\n                    Search\r\n                </Button>\r\n            )}\r\n        </Form>\r\n    );\r\n}\r\n\r\nexport default SearchBox;\r\n","import React, { useState } from \"react\";\r\nimport { NavDropdown, Form } from \"react-bootstrap\";\r\nfunction GenresDropdown(props) {\r\n    const [genreId, setGenreId] = useState();\r\n    const [genres, setGenres] = useState([]);\r\n    const TMDB_BASE_URL = \"https://api.themoviedb.org/3\";\r\n    const getGenres = () => {\r\n        fetch(\r\n            `${TMDB_BASE_URL}/genre/movie/list?api_key=${atob(\r\n                \"ZDJmYTdhZDFlMjZhZjA4NDdkMzQ5ZDdkYmQ1ZjkzZTU=\"\r\n            )}`\r\n        )\r\n            .then((response) => response.json())\r\n            .then((response) => setGenres(response.genres));\r\n    };\r\n    function handleClick(e) {\r\n        setGenreId(e.target.id);\r\n        fetch(\r\n            \"https://api.themoviedb.org/3/movie/popular?api_key=754ad3989128c7d8cfcc82e6591e7f2e\"\r\n        )\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                props.setMovies(\r\n                    data.results.filter((movie) =>\r\n                        movie.genre_ids.includes(parseInt(genreId))\r\n                    )\r\n                );\r\n            });\r\n    }\r\n    return (\r\n        // <NavDropdown onClick={getGenres} title=\"Genres\" id=\"basic-nav-dropdown\">\r\n        //     {genres.map((genre) => {\r\n        //         return (\r\n        //             <NavDropdown.Item\r\n        //                 onClick={handleClick}\r\n        //                 id={genre.id}\r\n        //                 key={genre.id}\r\n        //             >\r\n        //                 {genre.name}\r\n        //             </NavDropdown.Item>\r\n        //         );\r\n        //     })}\r\n        // </NavDropdown>\r\n        \r\n            <Form>\r\n            <Form.Control className=\"form-control-sm genres\" placeholder=\"Genres\" onClick={getGenres} as=\"select\">\r\n                <option disabled selected>Choose Genre</option>\r\n                {genres.map((genre) => {\r\n                    return (\r\n                        <option\r\n                            onClick={handleClick}\r\n                            id={genre.id}\r\n                            key={genre.id}\r\n                        >\r\n                            {genre.name}\r\n                        </option>\r\n                    );\r\n                })}\r\n            </Form.Control>\r\n            </Form>\r\n    );\r\n}\r\n\r\nexport default GenresDropdown;\r\n","import React, { useState } from \"react\";\r\nimport SearchBox from \"./SearchBox\";\r\nimport { Navbar, Nav, NavDropdown } from \"react-bootstrap\";\r\nimport GenresDropdown from \"./GenresDropdown\"\r\nfunction NavB(props) {\r\n    \r\n    const [genres, setGenres] = useState([]);\r\n    \r\n    \r\n    // const handleChange = (e) => {\r\n    //     if (e.target.value) {\r\n    //         setSpinner(\"d-block\");\r\n    //         fetch(constructUrl(\"search/movie\", e.target.value))\r\n    //             .then((response) => response.json())\r\n    //             .then((response) => props.get(response.results));\r\n    //     } else {\r\n    //         setSpinner(\"d-none\");\r\n    //     }\r\n    // };\r\n    \r\n  \r\n    return (\r\n        <Navbar bg=\"dark\" className=\"text-white\" expand=\"lg\" variant=\"dark\">\r\n            <Navbar.Brand href=\"#home\">! Netflix</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                    <Nav.Link href=\"#home\">Home</Nav.Link>\r\n                    <GenresDropdown setMovies={props.setMovies}/>\r\n                </Nav>\r\n                <SearchBox setMovies={props.setMovies}  />\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    );\r\n}\r\nexport default NavB;\r\n","import React, { useState } from \"react\";\nimport Main from \"./Components/Main\";\nimport Footer from \"./Components/Footer\";\nimport Navbar from \"./Components/Navbar\";\nimport \"./App.css\";\n\n\n\n\nfunction App() {\n    \n  const [movies, setMovies] = useState([]);\n  const [trending, setTrending] = useState([])\n  window.addEventListener('DOMContentLoaded',() => {\n      fetch(\"https://api.themoviedb.org/3/trending/movie/day?api_key=754ad3989128c7d8cfcc82e6591e7f2e\")\n      .then(response => response.json())\n      .then(data =>{ \n        setTrending(data.results)\n      })\n    })\n\n    return (\n        <>\n            <Navbar setMovies ={setMovies}/>\n            <Main movies={movies.length === 0 ? trending:movies}/>\n            <Footer />\n        </>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}