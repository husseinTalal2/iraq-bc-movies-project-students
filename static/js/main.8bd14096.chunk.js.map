{"version":3,"sources":["Components/MovieItem.js","Components/MovieContext.js","Components/MovieGrid.js","Components/MovieInfo.js","API.js","Components/MoviePage.js","Components/ActorInfo.js","Components/Search.js","Components/Main.js","Components/Footer.js","Components/SearchBox.js","Components/GenresDropdown.js","Components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["MovieItem","props","to","mov","id","title","Card","className","Img","variant","src","poster_path","Body","Title","Row","Col","Badge","pill","hasOwnProperty","release_date","substring","vote_average","MovieContext","createContext","reducer","state","action","type","movies","selectedGenre","console","log","initialState","MoiveProvider","useReducer","dispatch","Provider","value","children","MovieGrid","useContext","filter","movie","genre_ids","includes","Container","map","xs","md","lg","key","MovieInfo","overview","runtime","genres","genre","name","fetching","path","query","full_url","fetch","undefined","then","response","json","MoviePage","useState","setMovie","video","setVideo","cast","setCast","history","useHistory","useParams","useEffect","API","split","data","Button","onClick","goBack","alt","slidesPerPage","arrows","infinite","actor","profile_path","results","allowFullScreen","ActorInfo","Search","location","useLocation","search","slice","Main","exact","component","render","footer","href","SearchBox","searchText","setSearchText","isLoading","setIsLoading","Form","inline","onSubmit","e","preventDefault","setTimeout","FormControl","onChange","target","placeholder","required","Spinner","animation","GenresDropdown","setGenres","handleChange","parseInt","Control","as","disabled","NavB","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","Nav","Item","pathname","App","Footer","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8bd14096.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, Badge, Col, Row } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nfunction MovieItem(props) {\r\n    return (\r\n        <Link to={`/movie/${props.mov.id}-${props.mov.title}`}>\r\n            <Card className=\"shadow my-3 card-shadow\">\r\n                <Card.Img\r\n                    variant=\"top\"\r\n                    src={\r\n                        \"https://image.tmdb.org/t/p/w300\" +\r\n                        props.mov.poster_path\r\n                    }\r\n                />\r\n                <Card.Body>\r\n                    <Card.Title>{props.mov.title}</Card.Title>\r\n                    <Row className=\"justify-content-md-between\">\r\n                        <Col>\r\n                            <Badge pill variant=\"primary\">\r\n                                {props.mov.hasOwnProperty(\"release_date\")\r\n                                    ? props.mov.release_date.substring(0, 4)\r\n                                    : \"no release date\"}\r\n                            </Badge>\r\n                        </Col>\r\n                        <Col>\r\n                            <Badge pill variant=\"warning\">\r\n                                Rating {props.mov.vote_average}\r\n                            </Badge>\r\n                        </Col>\r\n                    </Row>\r\n                </Card.Body>\r\n            </Card>\r\n        </Link>\r\n    );\r\n}\r\n\r\nexport default MovieItem;\r\n","import React, { createContext, useReducer } from \"react\";\r\n\r\nexport const MovieContext = createContext();\r\nconst SET_MOVIES = \"SET_MOVIES\";\r\nconst SET_SELECTED_GENRE = \"SET_SELECTED_GENRE\";\r\n\r\nfunction reducer(state, action) {\r\n    switch (action.type) {\r\n        case SET_MOVIES:\r\n            return { ...state, movies: action.movies };\r\n        case SET_SELECTED_GENRE:\r\n            return { ...state, selectedGenre: action.selectedGenre };\r\n        default :\r\n            console.log(\"from default\");\r\n            break;\r\n            \r\n    }\r\n}\r\nconst initialState = {\r\n    movies: [],\r\n    selectedGenre: -1,\r\n};\r\nexport function MoiveProvider(props) {\r\n\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n    return (\r\n        <MovieContext.Provider value={[state, dispatch]}>\r\n            {props.children}\r\n        </MovieContext.Provider>\r\n    );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport MovieItem from \"./MovieItem\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport { MovieContext } from \"./MovieContext\";\r\nfunction MovieGrid() {\r\n    const [state] = useContext(MovieContext);\r\n\r\n    let movies;\r\n    if (state !== !!undefined) {\r\n        movies =\r\n            state.selectedGenre === -1\r\n                ? state.movies\r\n                : state.movies.filter((movie) =>\r\n                      movie.genre_ids.includes(state.selectedGenre)\r\n                  );\r\n    }\r\n\r\n    return (\r\n        <Container className=\"my-5\">\r\n            <Row>\r\n                {movies !== !!undefined\r\n                    ? movies.map((movie) => {\r\n                          return (\r\n                              <Col xs={12} md={4} lg={3} key={movie.id}>\r\n                                  <MovieItem mov={movie} />\r\n                              </Col>\r\n                          );\r\n                      })\r\n                    : \"\"}\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default MovieGrid;\r\n","import React from \"react\";\r\nimport { Container, Badge } from \"react-bootstrap\";\r\nfunction MovieInfo(props) {\r\n    \r\n    return (\r\n        <>\r\n            <Container>\r\n                <h1>{props.movie.title}</h1>\r\n\r\n                <h3>\r\n                    {props.movie.hasOwnProperty(\"release_date\")\r\n                        ? props.movie.release_date.substring(0, 4)\r\n                        : \"\"}\r\n                </h3>\r\n                <p className=\"my-4\">{props.movie.overview}</p>\r\n                <h4 className=\"my-4\">{props.movie.runtime} minutes</h4>\r\n                {props.movie.title\r\n                    ? props.movie.genres.map((genre) => {\r\n                          return (\r\n                              <Badge\r\n                                  className=\"mr-2\"\r\n                                  variant=\"info\"\r\n                                  pill\r\n                                  key={genre.name}\r\n                              >\r\n                                  {genre.name}\r\n                              </Badge>\r\n                          );\r\n                      })\r\n                    : \"\"}\r\n                <br />\r\n                <Badge className=\"mt-4\" variant=\"warning\">\r\n                    IMDB {props.movie.vote_average}\r\n                </Badge>\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MovieInfo;\r\n","const TMDB_BASE_URL = \"https://api.themoviedb.org/3\";\r\nconst KEY = \"?api_key=754ad3989128c7d8cfcc82e6591e7f2e\";\r\nconst fetching = {\r\n    fetching: json,\r\n};\r\nfunction json(path, query) {\r\n    let full_url = TMDB_BASE_URL + path + KEY;\r\n    full_url += query === undefined ? \"\" : \"&query=\" + query;\r\n    return fetch(full_url).then((response) => response.json());\r\n}\r\n\r\nexport default fetching;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Container, Button, Row, Col } from \"react-bootstrap\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport MovieInfo from \"./MovieInfo\";\r\nimport Carousel from \"@brainhubeu/react-carousel\";\r\nimport \"@brainhubeu/react-carousel/lib/style.css\";\r\nimport API from \"../API\";\r\nfunction MoviePage() {\r\n    const [movie, setMovie] = useState({});\r\n    const [video, setVideo] = useState({});\r\n    const [cast, setCast] = useState([]);\r\n    const history = useHistory();\r\n    const handleBack = () => {\r\n        history.goBack();\r\n    };\r\n    const { id } = useParams();\r\n\r\n    useEffect(() => {\r\n        //get movie info\r\n        API.fetching(`/movie/${id.split(\"-\")[0]}`).then((data) =>\r\n            setMovie(data)\r\n        );\r\n        //get movie videos\r\n        API.fetching(`/movie/${id.split(\"-\")[0]}/videos`).then((data) =>\r\n            setVideo(data)\r\n        );\r\n        //get movie cast\r\n        API.fetching(`/movie/${id.split(\"-\")[0]}/credits`).then((data) =>\r\n            setCast(data.cast)\r\n        );\r\n    }, [id]);\r\n\r\n    return (\r\n        <Container>\r\n            <Button onClick={handleBack} className=\"primary my-4\">\r\n                Back\r\n            </Button>\r\n\r\n            <Row>\r\n                <Col xs={12} md={4}>\r\n                    <img\r\n                        alt=\"movie poster\"\r\n                        className=\"img-fluid rounded\"\r\n                        src={\r\n                            \"https://image.tmdb.org/t/p/w300\" +\r\n                            movie.poster_path\r\n                        }\r\n                    />\r\n                </Col>\r\n                <Col xs={12} md={8}>\r\n                    <MovieInfo movie={movie} />\r\n                </Col>\r\n            </Row>\r\n            <Carousel className=\"my-4\" slidesPerPage={3} arrows infinite>\r\n                {cast !== undefined\r\n                    ? cast.map((actor) => {\r\n                          return (\r\n                              <Link\r\n                                  to={`/people/${actor.id}-${actor.name}/this-is-test `}\r\n                              >\r\n                                  <div className=\"m-2 \">\r\n                                      <img\r\n                                          alt=\"actor\"\r\n                                          className=\"img-fluid rounded \"\r\n                                          src={`https://image.tmdb.org/t/p/w300${actor.profile_path}`}\r\n                                      />\r\n                                      <h4>{actor.name}</h4>\r\n                                  </div>\r\n                              </Link>\r\n                          );\r\n                      })\r\n                    : \"\"}\r\n            </Carousel>\r\n            {video.id ? (\r\n                <div className=\"my-4 embed-responsive embed-responsive-16by9\">\r\n                    <iframe\r\n                        title=\"trailer\"\r\n                        className=\"embed-responsive-item\"\r\n                        src={`https://www.youtube.com/embed/${video.results[0].key}?rel=0`}\r\n                        allowFullScreen\r\n                    ></iframe>\r\n                </div>\r\n            ) : (\r\n                \"\"\r\n            )}\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default MoviePage;\r\n","import React from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport { Button } from \"react-bootstrap\";\r\nfunction ActorInfo() {\r\n    const { id } = useParams();\r\n\r\n    const history = useHistory();\r\n    const handleBack = () => {\r\n        history.goBack();\r\n    };\r\n    return (\r\n        <>\r\n            <Button onClick={handleBack}>back</Button>\r\n            <h1>{id} actor id</h1>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ActorInfo;\r\n","import React, {useEffect, useContext } from \"react\";\r\nimport MovieGrid from \"./MovieGrid\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { MovieContext } from \"./MovieContext\";\r\nimport API from \"../API\";\r\nfunction Search() {\r\n    const [, dispatch] = useContext(MovieContext);\r\n\r\n    const location = useLocation();\r\n    useEffect(() => {\r\n        API.fetching(\"/search/movie\", location.search.slice(3)).then((data) =>\r\n            dispatch({ type: \"SET_MOVIES\", movies: data.results })\r\n        );\r\n    }, [location.search, dispatch]);\r\n    return <MovieGrid />;\r\n}\r\n\r\nexport default Search;\r\n","import React, { useContext, useEffect } from \"react\";\r\nimport MovieGrid from \"./MovieGrid\";\r\nimport MoviePage from \"./MoviePage\";\r\nimport {Route, Switch } from \"react-router-dom\";\r\nimport ActorInfo from \"./ActorInfo\";\r\nimport Search from \"./Search\";\r\nimport { MovieContext } from \"./MovieContext\";\r\nimport API from \"../API\";\r\nfunction Main() {\r\n    const [, dispatch] = useContext(MovieContext);\r\n\r\n    useEffect(() => {\r\n        API.fetching(\"/trending/movie/day\").then((data) =>\r\n            dispatch({ type: \"SET_MOVIES\", movies: data.results })\r\n        );\r\n    }, [dispatch]);\r\n    return (\r\n        <main>\r\n            <Switch>\r\n                <Route path=\"/\" exact component={() => <MovieGrid />} />\r\n\r\n                <Route path={`/movie/:id`} render={() => <MoviePage />} />\r\n                <Route\r\n                    path={`/people/:id`}\r\n                    render={(props) => <ActorInfo {...props} />}\r\n                />\r\n                <Route path={`/search`} component={Search} />\r\n            </Switch>\r\n        </main>\r\n    );\r\n}\r\nexport default Main;\r\n","import React from \"react\";\r\n\r\nfunction footer() {\r\n    return (\r\n        <footer className=\"d-flex justify-content-center bg-dark p-5 text-white \">\r\n            <p>\r\n                The website made with love by\r\n                <a href=\"https://github.com/abdulbasit-web\">\r\n                    {\" \"}\r\n                    Abdulbasit\r\n                </a>, <a href=\"https://github.com/husseinTalal2\"> Hussein </a>,{\" \"}\r\n                <a href=\"https://github.com/ZeenaKareemAlhello\"> Zeena </a>\r\n                and <a href=\"https://github.com/yazenfiras\"> Yezen </a>\r\n            </p>\r\n        </footer>\r\n    );\r\n}\r\nexport default footer;\r\n","import React, { useState } from \"react\";\r\nimport { Form, FormControl, Button, Spinner } from \"react-bootstrap\";\r\nimport { useLocation, Link } from \"react-router-dom\";\r\n\r\n\r\nfunction SearchBox(props) {\r\n    const [searchText, setSearchText] = useState(\"\");\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        setIsLoading(true);\r\n        setTimeout(() => setIsLoading(false));\r\n    };\r\n    const location = useLocation();\r\n    console.log(location);\r\n    return (\r\n        <Form inline onSubmit={handleSubmit}>\r\n            <FormControl\r\n                onChange={(e) => setSearchText(e.target.value)}\r\n                type=\"text\"\r\n                placeholder=\"Search for movie...\"\r\n                className=\"mr-sm-2\"\r\n                required\r\n            />\r\n            {isLoading ? (\r\n                <Spinner\r\n                    className={isLoading ? \"d-block\" : \"d-none\"}\r\n                    animation=\"border\"\r\n                    variant=\"success\"\r\n                />\r\n            ) : (\r\n                <Link to={`/search?q=${searchText}`}>\r\n                    <Button type=\"submit\" variant=\"outline-success\">\r\n                        Search\r\n                    </Button>\r\n                </Link>\r\n            )}\r\n        </Form>\r\n    );\r\n}\r\n\r\nexport default SearchBox;\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { MovieContext } from \"./MovieContext\";\r\nimport API from \"../API\";\r\nfunction GenresDropdown(props) {\r\n    const [, dispatch] = useContext(MovieContext);\r\n    const [genres, setGenres] = useState([]);\r\n\r\n    useEffect(() => {\r\n        API.fetching(\"/genre/movie/list\").then((data) =>\r\n            setGenres(data.genres)\r\n        );\r\n    }, []);\r\n\r\n    function handleChange(e) {\r\n        dispatch({\r\n            type: \"SET_SELECTED_GENRE\",\r\n            selectedGenre: parseInt(e.target.id),\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Form>\r\n                <Form.Control className=\"ml-4\" as=\"select\">\r\n                    <option onClick={handleChange} disabled={false} id=\"-1\">\r\n                        All\r\n                    </option>\r\n                    {genres.map((genre) => (\r\n                        <option\r\n                            key={genre.id}\r\n                            id={genre.id}\r\n                            onClick={handleChange}\r\n                        >\r\n                            {genre.name}\r\n                        </option>\r\n                    ))}\r\n                </Form.Control>\r\n            </Form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GenresDropdown;\r\n","import React from \"react\";\r\nimport SearchBox from \"./SearchBox\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\nimport GenresDropdown from \"./GenresDropdown\";\r\nimport { GiFlame } from \"react-icons/gi\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nfunction NavB() {\r\n    const location = useLocation();\r\n    return (\r\n        <Navbar bg=\"dark\" className=\"text-white\" expand=\"lg\" variant=\"dark\">\r\n            <a href=\"/\">\r\n                <Navbar.Brand>\r\n                    <GiFlame /> NetFlame\r\n                </Navbar.Brand>\r\n            </a>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                    <Link to=\"/\">\r\n                        <Nav.Item>Home</Nav.Item>\r\n                    </Link>\r\n                    <GenresDropdown/>\r\n                </Nav>\r\n                {location.pathname === \"/\" ? (\r\n                    <SearchBox />\r\n                ) : (\r\n                    \"\"\r\n                )}\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    );\r\n}\r\nexport default NavB;\r\n","import React from \"react\";\r\nimport Main from \"./Components/Main\";\r\nimport Footer from \"./Components/Footer\";\r\nimport Navbar from \"./Components/Navbar\";\r\nimport \"./App.css\";\r\nimport { BrowserRouter as Router} from \"react-router-dom\";\r\nimport { MoiveProvider} from \"./Components/MovieContext\";\r\n\r\nfunction App() {\r\n    return (\r\n        <MoiveProvider>\r\n            <Router>\r\n                <>\r\n                    <Navbar />\r\n                    <Main />\r\n                    <Footer />\r\n                </>\r\n            </Router>\r\n        </MoiveProvider>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.css\"; \r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}